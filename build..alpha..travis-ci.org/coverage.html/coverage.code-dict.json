{"/home/travis/build/npmtest/node-npmtest-tsify/test.js":"/* istanbul instrument in package npmtest_tsify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tsify/lib.npmtest_tsify.js":"/* istanbul instrument in package npmtest_tsify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_tsify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_tsify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-tsify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-tsify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_tsify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_tsify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_tsify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_tsify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_tsify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_tsify.__dirname + '/lib.npmtest_tsify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tsify/node_modules/tsify/index.js":"'use strict';\n\nvar realpath = require('fs.realpath');\nvar log      = require('util').debuglog(require('./package').name);\nvar through  = require('through2');\nvar path     = require('path');\n\nfunction tsify(b, opts) {\n\n\tif (typeof b === 'string') {\n\t\tthrow new Error('tsify appears to have been configured as a transform; it must be configured as a plugin.');\n\t}\n\tvar ts = opts.typescript || require('typescript');\n\tif (typeof ts === 'string' || ts instanceof String) {\n\t\tts = require(ts);\n\t}\n\n\tvar Tsifier = require('./lib/Tsifier')(ts);\n\tvar tsifier = new Tsifier(opts, b._options);\n\n\ttsifier.on('error', function (error) {\n\t\tb.pipeline.emit('error', error);\n\t});\n\ttsifier.on('file', function (file, id) {\n\t\tb.emit('file', file, id);\n\t});\n\n\tsetupPipeline();\n\n\tvar transformOpts = {\n\t\tglobal: opts.global\n\t};\n\tb.transform(tsifier.transform.bind(tsifier), transformOpts);\n\n\tb.on('reset', function () {\n\t\tsetupPipeline();\n\t});\n\n\tfunction setupPipeline() {\n\t\tif (tsifier.opts.jsx && b._extensions.indexOf('.tsx') === -1)\n\t\t\tb._extensions.unshift('.tsx');\n\n\t\tif (b._extensions.indexOf('.ts') === -1)\n\t\t\tb._extensions.unshift('.ts');\n\n\t\tb.pipeline.get('record').push(gatherEntryPoints());\n\t}\n\n\tfunction gatherEntryPoints() {\n\t\tvar rows = [];\n\t\treturn through.obj(transform, flush);\n\n\t\tfunction transform(row, enc, next) {\n\t\t\trows.push(row);\n\t\t\tnext();\n\t\t}\n\n\t\tfunction flush(next) {\n\t\t\tvar self = this;\n\t\t\tvar ignoredFiles = [];\n\t\t\tvar entryFiles = rows\n\t\t\t\t.map(function (row) {\n\t\t\t\t\tvar file = row.file || row.id;\n\t\t\t\t\tif (file) {\n\t\t\t\t\t\tif (row.source !== undefined) {\n\t\t\t\t\t\t\tignoredFiles.push(file);\n\t\t\t\t\t\t} else if (row.basedir) {\n\t\t\t\t\t\t\treturn path.resolve(row.basedir, file);\n\t\t\t\t\t\t} else if (path.isAbsolute(file)) {\n\t\t\t\t\t\t\treturn file;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tignoredFiles.push(file);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t})\n\t\t\t\t.filter(function (file) { return file; })\n\t\t\t\t.map(function (file) { return realpath.realpathSync(file); });\n\t\t\tif (entryFiles.length) {\n\t\t\t\tlog('Files from browserify entry points:');\n\t\t\t\tentryFiles.forEach(function (file) { log('  %s', file); });\n\t\t\t}\n\t\t\tif (ignoredFiles.length) {\n\t\t\t\tlog('Ignored browserify entry points:');\n\t\t\t\tignoredFiles.forEach(function (file) { log('  %s', file); });\n\t\t\t}\n\t\t\ttsifier.reset();\n\t\t\ttsifier.generateCache(entryFiles, ignoredFiles);\n\t\t\trows.forEach(function (row) { self.push(row); });\n\t\t\tself.push(null);\n\t\t\tnext();\n\t\t}\n\t}\n}\n\nmodule.exports = tsify;\n","/home/travis/build/npmtest/node-npmtest-tsify/node_modules/tsify/lib/CompileError.js":"'use strict';\n\nvar os = require('os');\n\nmodule.exports = function (ts) {\n\tfunction CompileError(diagnostic) {\n\t\tSyntaxError.call(this);\n\n\t\tthis.message = '';\n\n\t\tif (diagnostic.file) {\n\t\t\tvar loc = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start);\n\t\t\tthis.fileName = diagnostic.file.fileName;\n\t\t\tthis.line = loc.line + 1;\n\t\t\tthis.column = loc.character + 1;\n\t\t\tthis.message += this.fileName + '(' + this.line + ',' + this.column + '): ';\n\t\t}\n\n\t\tvar category = ts.DiagnosticCategory[diagnostic.category];\n\t\tthis.name = 'TypeScript error';\n\t\tthis.message += category + ' TS' + diagnostic.code + ': ' +\n\t\t\tts.flattenDiagnosticMessageText(diagnostic.messageText, os.EOL);\n\t}\n\n\tCompileError.prototype = Object.create(SyntaxError.prototype);\n\n\treturn CompileError;\n};\n","/home/travis/build/npmtest/node-npmtest-tsify/node_modules/tsify/lib/Host.js":"'use strict';\n\nvar events    = require('events');\nvar fs        = require('fs');\nvar realpath  = require('fs.realpath');\nvar log       = require('util').debuglog(require('../package').name);\nvar trace     = require('util').debuglog(require('../package').name + '-trace');\nvar os        = require('os');\nvar path      = require('path');\nvar util      = require('util');\nvar semver    = require('semver');\n\nmodule.exports = function (ts) {\n\n\tvar caseSensitive;\n\n\ttry {\n\t\tfs.accessSync(path.join(__dirname, path.basename(__filename).toUpperCase()), fs.constants.R_OK);\n\t\tcaseSensitive = false;\n\t} catch (error) {\n\t\ttrace('Case sensitive detection error: %s', error);\n\t\tcaseSensitive = true;\n\t}\n\tlog('Detected case %s file system', caseSensitive ? 'sensitive' : 'insensitive');\n\n\tfunction Host(currentDirectory, opts) {\n\n\t\tthis.currentDirectory = this.getCanonicalFileName(path.resolve(currentDirectory));\n\t\tthis.outputDirectory = this.getCanonicalFileName(path.resolve(opts.outDir));\n\t\tthis.rootDirectory = this.getCanonicalFileName(path.resolve(opts.rootDir));\n\t\tthis.languageVersion = opts.target;\n\t\tthis.files = {};\n\t\tthis.previousFiles = {};\n\t\tthis.output = {};\n\t\tthis.version = 0;\n\t\tthis.error = false;\n\t}\n\n\tutil.inherits(Host, events.EventEmitter);\n\n\tHost.prototype._reset = function () {\n\t\tthis.previousFiles = this.files;\n\t\tthis.files = {};\n\t\tthis.output = {};\n\t\tthis.error = false;\n\t\t++this.version;\n\n\t\tlog('Resetting (version %d)', this.version);\n\t};\n\n\tHost.prototype._addFile = function (filename, root) {\n\n\t\t// Ensure that the relative file name is what's passed to\n\t\t// 'createSourceFile', as that's the name that will be used in error\n\t\t// messages, etc.\n\n\t\tvar relative = ts.normalizeSlashes(path.relative(\n\t\t\tthis.currentDirectory,\n\t\t\tthis.getCanonicalFileName(path.resolve(this.currentDirectory, filename))\n\t\t));\n\t\tvar canonical = this._canonical(filename);\n\t\ttrace('Parsing %s', canonical);\n\n\t\tvar text;\n\t\ttry {\n\t\t\ttext = fs.readFileSync(filename, 'utf-8');\n\t\t} catch (ex) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar file;\n\t\tvar current = this.files[canonical];\n\t\tvar previous = this.previousFiles[canonical];\n\t\tvar version;\n\n\t\tif (current && current.contents === text) {\n\t\t\tfile = current.ts;\n\t\t\tversion = current.version;\n\t\t\ttrace('Reused current file %s (version %d)', canonical, version);\n\t\t} else if (previous && previous.contents === text) {\n\t\t\tfile = previous.ts;\n\t\t\tversion = previous.version;\n\t\t\ttrace('Reused previous file %s (version %d)', canonical, version);\n\t\t} else {\n\t\t\tfile = ts.createSourceFile(relative, text, this.languageVersion, true);\n\t\t\tversion = this.version;\n\t\t\ttrace('New version of source file %s (version %d)', canonical, version);\n\t\t}\n\n\t\tthis.files[canonical] = {\n\t\t\tfilename: relative,\n\t\t\tcontents: text,\n\t\t\tts: file,\n\t\t\troot: root,\n\t\t\tversion: version,\n\t\t\tnodeModule: /\\/node_modules\\//i.test(canonical) && !/\\.d\\.ts$/i.test(canonical)\n\t\t};\n\t\tthis.emit('file', canonical, relative);\n\n\t\treturn file;\n\t};\n\n\tHost.prototype.getSourceFile = function (filename) {\n\t\tif (filename === '__lib.d.ts') {\n\t\t\treturn this.libDefault;\n\t\t}\n\t\tvar canonical = this._canonical(filename);\n\t\tif (this.files[canonical]) {\n\t\t\treturn this.files[canonical].ts;\n\t\t}\n\t\treturn this._addFile(filename, false);\n\t};\n\n\tHost.prototype.getDefaultLibFileName = function () {\n\t\tvar libPath = path.dirname(ts.sys.getExecutingFilePath());\n\t\tvar libFile = ts.getDefaultLibFileName({ target: this.languageVersion });\n\t\treturn ts.normalizeSlashes(path.join(libPath, libFile));\n\t};\n\n\tHost.prototype.writeFile = function (filename, data) {\n\n\t\tvar outputCanonical = this._canonical(filename);\n\t\tlog('Cache write %s', outputCanonical);\n\t\tthis.output[outputCanonical] = data;\n\n\t\tvar sourceCanonical = this._inferSourceCanonical(outputCanonical);\n\t\tvar sourceFollowed = this._follow(path.dirname(sourceCanonical)) + '/' + path.basename(sourceCanonical);\n\n\t\tif (sourceFollowed !== sourceCanonical) {\n\t\t\toutputCanonical = this._inferOutputCanonical(sourceFollowed);\n\t\t\tlog('Cache write (followed) %s', outputCanonical);\n\t\t\tthis.output[outputCanonical] = data;\n\t\t}\n\t};\n\n\tHost.prototype.getCurrentDirectory = function () {\n\t\treturn this.currentDirectory;\n\t};\n\n\tHost.getCanonicalFileName = function (filename) {\n\t\treturn ts.normalizeSlashes(caseSensitive ? filename : filename.toLowerCase());\n\t};\n\n\tHost.prototype.getCanonicalFileName = Host.getCanonicalFileName;\n\n\tHost.useCaseSensitiveFileNames = function () {\n\t\treturn caseSensitive;\n\t};\n\n\tHost.prototype.useCaseSensitiveFileNames = Host.useCaseSensitiveFileNames;\n\n\tHost.prototype.getNewLine = function () {\n\t\treturn os.EOL;\n\t};\n\n\tHost.prototype.fileExists = function (filename) {\n\t\treturn ts.sys.fileExists(filename);\n\t};\n\n\tHost.prototype.readFile = function (filename) {\n\t\treturn ts.sys.readFile(filename);\n\t};\n\n\tHost.prototype.directoryExists = function (dirname) {\n\t\treturn ts.sys.directoryExists(dirname);\n\t};\n\n\tHost.prototype.getDirectories = function (dirname) {\n\t\treturn ts.sys.getDirectories(dirname);\n\t};\n\n\tHost.prototype.getEnvironmentVariable = function (name) {\n\t\treturn ts.sys.getEnvironmentVariable(name);\n\t};\n\n\tHost.prototype.realpath = function (name) {\n\t\treturn realpath.realpathSync(name);\n\t};\n\n\tHost.prototype.trace = function (message) {\n\t\tts.sys.write(message + this.getNewLine());\n\t};\n\n\tHost.prototype._rootFilenames = function () {\n\n\t\tvar rootFilenames = [];\n\n\t\tfor (var filename in this.files) {\n\t\t\tif (!Object.hasOwnProperty.call(this.files, filename)) continue;\n\t\t\tif (!this.files[filename].root) continue;\n\t\t\trootFilenames.push(filename);\n\t\t}\n\t\treturn rootFilenames;\n\t}\n\n\tHost.prototype._nodeModuleFilenames = function () {\n\n\t\tvar nodeModuleFilenames = [];\n\n\t\tfor (var filename in this.files) {\n\t\t\tif (!Object.hasOwnProperty.call(this.files, filename)) continue;\n\t\t\tif (!this.files[filename].nodeModule) continue;\n\t\t\tnodeModuleFilenames.push(filename);\n\t\t}\n\t\treturn nodeModuleFilenames;\n\t}\n\n\tHost.prototype._compile = function (opts) {\n\n\t\tvar rootFilenames = this._rootFilenames();\n\t\tvar nodeModuleFilenames = [];\n\n\t\tlog('Compiling files:');\n\t\trootFilenames.forEach(function (file) { log('  %s', file); });\n\n\t\tif (semver.gte(ts.version, '2.0.0')) {\n\t\t\tts.createProgram(rootFilenames, opts, this);\n\t\t\tnodeModuleFilenames = this._nodeModuleFilenames();\n\t\t\tlog('  + %d file(s) found in node_modules', nodeModuleFilenames.length);\n\t\t}\n\t\treturn ts.createProgram(rootFilenames.concat(nodeModuleFilenames), opts, this);\n\t}\n\n\tHost.prototype._output = function (filename) {\n\n\t\tvar outputCanonical = this._inferOutputCanonical(filename);\n\t\tlog('Cache read %s', outputCanonical);\n\n\t\tvar output = this.output[outputCanonical];\n\t\tif (!output) {\n\t\t\tlog('Cache miss on %s', outputCanonical);\n\t\t}\n\t\treturn output;\n\t}\n\n\tHost.prototype._canonical = function (filename) {\n\t\treturn this.getCanonicalFileName(path.resolve(\n\t\t\tthis.currentDirectory,\n\t\t\tfilename\n\t\t));\n\t}\n\n\tHost.prototype._inferOutputCanonical = function (filename) {\n\n\t\tvar sourceCanonical = this._canonical(filename);\n\t\tvar outputRelative = path.relative(\n\t\t\tthis.rootDirectory,\n\t\t\tsourceCanonical\n\t\t);\n\t\tvar outputCanonical = this.getCanonicalFileName(path.resolve(\n\t\t\tthis.outputDirectory,\n\t\t\toutputRelative\n\t\t));\n\t\treturn outputCanonical;\n\t}\n\n\tHost.prototype._inferSourceCanonical = function (filename) {\n\n\t\tvar outputCanonical = this._canonical(filename);\n\t\tvar outputRelative = path.relative(\n\t\t\tthis.outputDirectory,\n\t\t\toutputCanonical\n\t\t);\n\t\tvar sourceCanonical = this.getCanonicalFileName(path.resolve(\n\t\t\tthis.rootDirectory,\n\t\t\toutputRelative\n\t\t));\n\t\treturn sourceCanonical;\n\t}\n\n\tHost.prototype._follow = function (filename) {\n\n\t\tfilename = this._canonical(filename);\n\t\tvar basename;\n\t\tvar parts = [];\n\n\t\tdo {\n\t\t\tvar stats = fs.lstatSync(filename);\n\t\t\tif (stats.isSymbolicLink()) {\n\t\t\t\tfilename = realpath.realpathSync(filename);\n\t\t\t} else {\n\t\t\t\tbasename = path.basename(filename);\n\t\t\t\tif (basename) {\n\t\t\t\t\tparts.unshift(basename);\n\t\t\t\t\tfilename = path.dirname(filename);\n\t\t\t\t}\n\t\t\t}\n\t\t} while (basename);\n\n\t\treturn ts.normalizeSlashes(filename + parts.join('/'));\n\t};\n\n\treturn Host;\n};\n","/home/travis/build/npmtest/node-npmtest-tsify/node_modules/tsify/lib/Tsifier.js":"'use strict';\n\nvar convert  = require('convert-source-map');\nvar events   = require('events');\nvar extend   = require('util')._extend;\nvar fs       = require('fs');\nvar realpath = require('fs.realpath');\nvar log      = require('util').debuglog(require('../package').name);\nvar trace    = require('util').debuglog(require('../package').name + '-trace');\nvar path     = require('path');\nvar through  = require('through2');\nvar time     = require('./time');\nvar tsconfig = require('tsconfig');\nvar util     = require('util');\nvar assign   = require('object-assign');\n\nmodule.exports = function (ts) {\n\tvar CompileError     = require('./CompileError')(ts);\n\tvar Host             = require('./Host')(ts);\n\tvar currentDirectory = ts.normalizeSlashes(realpath.realpathSync(process.cwd()));\n\n\tvar parseJsonConfigFileContent = ts.parseJsonConfigFileContent || ts.parseConfigFile;\n\n\tfunction isTypescript(file) {\n\t\treturn (/\\.tsx?$/i).test(file);\n\t}\n\n\tfunction isTsx(file) {\n\t\treturn (/\\.tsx$/i).test(file);\n\t}\n\n\tfunction isJavascript(file) {\n\t\treturn (/\\.jsx?$/i).test(file);\n\t}\n\n\tfunction isTypescriptDeclaration(file) {\n\t\treturn (/\\.d\\.ts$/i).test(file);\n\t}\n\n\tfunction replaceFileExtension(file, extension) {\n\t\treturn file.replace(/\\.\\w+$/i, extension);\n\t}\n\n\tfunction fileExists(file) {\n\t\ttry {\n\t\t\tvar stats = fs.lstatSync(file);\n\t\t\treturn stats.isFile();\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tfunction parseOptions(opts, bopts) {\n\n\t\t// Expand any short-name, command-line options\n\t\tvar expanded = {};\n\t\tif (opts.m) { expanded.module = opts.m; }\n\t\tif (opts.p) { expanded.project = opts.p; }\n\t\tif (opts.t) { expanded.target = opts.t; }\n\t\topts = assign(expanded, opts);\n\n\t\tvar config;\n\t\tvar configFile;\n\t\tif (typeof opts.project === \"object\"){\n\t\t\tlog('Using inline tsconfig');\n\t\t\tconfig = JSON.parse(JSON.stringify(opts.project));\n\t\t\tconfig.compilerOptions = config.compilerOptions || {};\n\t\t\textend(config.compilerOptions, opts);\n\t\t} else {\n\t\t\tif (fileExists(opts.project)) {\n\t\t\t\tconfigFile = opts.project;\n\t\t\t} else {\n\t\t\t\tconfigFile = ts.findConfigFile(\n\t\t\t\t\tts.normalizeSlashes(opts.project || bopts.basedir || currentDirectory),\n\t\t\t\t\tfileExists\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (configFile) {\n\t\t\t\tlog('Using tsconfig file at %s', configFile);\n\t\t\t\tconfig = tsconfig.readFileSync(configFile);\n\t\t\t\tconfig.compilerOptions = config.compilerOptions || {};\n\t\t\t\textend(config.compilerOptions, opts);\n\t\t\t} else {\n\t\t\t\tconfig = {\n\t\t\t\t\tfiles: [],\n\t\t\t\t\tcompilerOptions: opts\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tvar parsed = parseJsonConfigFileContent(\n\t\t\tconfig,\n\t\t\tts.sys,\n\t\t\tconfigFile ? ts.normalizeSlashes(path.resolve(path.dirname(configFile))) : currentDirectory,\n\t\t\tnull,\n\t\t\tconfigFile ? ts.normalizeSlashes(path.resolve(configFile)) : undefined\n\t\t);\n\n\t\t// Generate inline sourcemaps if Browserify's --debug option is set\n\t\tparsed.options.sourceMap = false;\n\t\tparsed.options.inlineSourceMap = bopts.debug;\n\t\tparsed.options.inlineSources = bopts.debug;\n\n\t\t// Default to CommonJS module mode\n\t\tparsed.options.module = parsed.options.module || ts.ModuleKind.CommonJS;\n\n\t\t// Blacklist --out/--outFile/--noEmit; these should definitely not be set, since we are doing\n\t\t// concatenation with Browserify instead\n\t\tdelete parsed.options.out;\n\t\tdelete parsed.options.outFile;\n\t\tdelete parsed.options.noEmit;\n\n\t\t// Set rootDir and outDir so we know exactly where the TS compiler will be trying to\n\t\t// write files; the filenames will end up being the keys into our in-memory store.\n\t\t// The output directory needs to be distinct from the input directory to prevent the TS\n\t\t// compiler from thinking that it might accidentally overwrite source files, which would\n\t\t// prevent it from outputting e.g. the results of transpiling ES6 JS files with --allowJs.\n\t\tparsed.options.rootDir = path.relative('.', '/');\n\t\tparsed.options.outDir = ts.normalizeSlashes(path.resolve('/__tsify__'));\n\n\t\tlog('Files from tsconfig parse:');\n\t\tparsed.fileNames.forEach(function (filename) { log('  %s', filename); });\n\n\t\tvar result = {\n\t\t\toptions: parsed.options,\n\t\t\tfileNames: parsed.fileNames\n\t\t};\n\n\t\treturn result;\n\t}\n\n\tfunction Tsifier(opts, bopts) {\n\t\tvar self = this;\n\n\t\tvar parsedOptions = parseOptions(opts, bopts);\n\t\tself.opts = parsedOptions.options;\n\t\tself.files = parsedOptions.fileNames;\n\t\tself.ignoredFiles = [];\n\t\tself.bopts = bopts;\n\t\tself.host = new Host(currentDirectory, self.opts);\n\n\t\tself.host.on('file', function (file, id) {\n\t\t\tself.emit('file', file, id);\n\t\t});\n\t}\n\n\tutil.inherits(Tsifier, events.EventEmitter);\n\n\tTsifier.prototype.reset = function () {\n\t\tvar self = this;\n\t\tself.ignoredFiles = [];\n\t\tself.host._reset();\n\t\tself.addFiles(self.files);\n\t};\n\n\tTsifier.prototype.generateCache = function (files, ignoredFiles) {\n\t\tif (ignoredFiles) {\n\t\t\tthis.ignoredFiles = ignoredFiles;\n\t\t}\n\t\tthis.addFiles(files);\n\t\tthis.compile();\n\t};\n\n\tTsifier.prototype.addFiles = function (files) {\n\t\tvar self = this;\n\t\tfiles.forEach(function (file) {\n\t\t\tself.host._addFile(file, true);\n\t\t});\n\t};\n\n\tTsifier.prototype.compile = function () {\n\t\tvar self = this;\n\n\t\tvar createProgram_t0 = time.start();\n\t\tvar program = self.host._compile(self.opts);\n\t\ttime.stop(createProgram_t0, 'createProgram');\n\n\t\tvar syntaxDiagnostics = self.checkSyntax(program);\n\t\tif (syntaxDiagnostics.length) {\n\t\t\tlog('Compilation encountered fatal syntax errors');\n\t\t\treturn;\n\t\t}\n\n\t\tvar semanticDiagnostics = self.checkSemantics(program);\n\t\tif (semanticDiagnostics.length && self.opts.noEmitOnError) {\n\t\t\tlog('Compilation encountered fatal semantic errors');\n\t\t\treturn;\n\t\t}\n\n\t\tvar emit_t0 = time.start();\n\t\tvar emitOutput = program.emit();\n\t\ttime.stop(emit_t0, 'emit program');\n\n\t\tvar emittedDiagnostics = self.checkEmittedOutput(emitOutput);\n\t\tif (emittedDiagnostics.length && self.opts.noEmitOnError) {\n\t\t\tlog('Compilation encountered fatal errors during emit');\n\t\t\treturn;\n\t\t}\n\n\t\tlog('Compilation completed without errors');\n\t};\n\n\tTsifier.prototype.checkSyntax = function (program) {\n\t\tvar self = this;\n\n\t\tvar syntaxCheck_t0 = time.start();\n\t\tvar syntaxDiagnostics = program.getSyntacticDiagnostics();\n\t\ttime.stop(syntaxCheck_t0, 'syntax checking');\n\n\t\tsyntaxDiagnostics.forEach(function (error) {\n\t\t\tself.emit('error', new CompileError(error));\n\t\t});\n\n\t\tif (syntaxDiagnostics.length) {\n\t\t\tself.host.error = true;\n\t\t}\n\t\treturn syntaxDiagnostics;\n\t};\n\n\tTsifier.prototype.checkSemantics = function (program) {\n\t\tvar self = this;\n\n\t\tvar semanticDiagnostics_t0 = time.start();\n\t\tvar semanticDiagnostics = program.getGlobalDiagnostics();\n\t\tif (semanticDiagnostics.length === 0) {\n\t\t\tsemanticDiagnostics = program.getSemanticDiagnostics();\n\t\t}\n\t\ttime.stop(semanticDiagnostics_t0, 'semantic checking');\n\n\t\tsemanticDiagnostics.forEach(function (error) {\n\t\t\tself.emit('error', new CompileError(error));\n\t\t});\n\n\t\tif (semanticDiagnostics.length && self.opts.noEmitOnError) {\n\t\t\tself.host.error = true;\n\t\t}\n\n\t\treturn semanticDiagnostics;\n\t};\n\n\tTsifier.prototype.checkEmittedOutput = function (emitOutput) {\n\t\tvar self = this;\n\n\t\tvar emittedDiagnostics = emitOutput.diagnostics;\n\t\temittedDiagnostics.forEach(function (error) {\n\t\t\tself.emit('error', new CompileError(error));\n\t\t});\n\n\t\tif (emittedDiagnostics.length && self.opts.noEmitOnError) {\n\t\t\tself.host.error = true;\n\t\t}\n\n\t\treturn emittedDiagnostics;\n\t};\n\n\tTsifier.prototype.transform = function (file) {\n\t\tvar self = this;\n\n\t\ttrace('Transforming %s', file);\n\n\t\tif (self.ignoredFiles.indexOf(file) !== -1) {\n\t\t\treturn through();\n\t\t}\n\n\t\tif (isTypescriptDeclaration(file)) {\n\t\t\treturn through(transform);\n\t\t}\n\n\t\tif (isTypescript(file) || (isJavascript(file) && self.opts.allowJs)) {\n\t\t\treturn through(transform, flush);\n\t\t}\n\n\t\treturn through();\n\n\t\tfunction transform(chunk, enc, next) {\n\t\t\tnext();\n\t\t}\n\t\tfunction flush(next) {\n\t\t\tif (self.host.error)\n\t\t\t\treturn;\n\n\t\t\tvar compiled = self.getCompiledFile(file);\n\t\t\tif (compiled) {\n\t\t\t\tthis.push(compiled);\n\t\t\t}\n\t\t\tthis.push(null);\n\t\t\tnext();\n\t\t}\n\t};\n\n\tTsifier.prototype.getCompiledFile = function (inputFile, alreadyMissedCache) {\n\t\tvar self = this;\n\t\tvar outputExtension = (ts.JsxEmit && self.opts.jsx === ts.JsxEmit.Preserve && isTsx(inputFile)) ? '.jsx' : '.js';\n\t\tvar output = self.host._output(replaceFileExtension(inputFile, outputExtension));\n\n\t\tif (output === undefined) {\n\t\t\tif (alreadyMissedCache) {\n\t\t\t\tself.emit('error', new Error('tsify: no compiled file for ' + inputFile));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tself.generateCache([inputFile]);\n\t\t\tif (self.host.error)\n\t\t\t\treturn;\n\t\t\treturn self.getCompiledFile(inputFile, true);\n\t\t}\n\n\t\tif (self.opts.inlineSourceMap) {\n\t\t\toutput = self.setSourcePathInSourcemap(output, inputFile);\n\t\t}\n\t\treturn output;\n\t};\n\n\tTsifier.prototype.setSourcePathInSourcemap = function (output, inputFile) {\n\t\tvar self = this;\n\t\tvar normalized = ts.normalizePath(path.relative(\n\t\t\tself.bopts.basedir || currentDirectory,\n\t\t\tinputFile\n\t\t));\n\n\t\tvar sourcemap = convert.fromComment(output);\n\t\tsourcemap.setProperty('sources', [normalized]);\n\t\treturn output.replace(convert.commentRegex, sourcemap.toComment());\n\t}\n\n\tvar result = Tsifier;\n\tresult.isTypescript = isTypescript;\n\tresult.isTypescriptDeclaration = isTypescriptDeclaration;\n\treturn result;\n};\n","/home/travis/build/npmtest/node-npmtest-tsify/node_modules/tsify/lib/time.js":"'use strict';\n\nvar log = require('util').debuglog(require('../package').name);\n\nfunction start() {\n\treturn process.hrtime();\n}\nfunction stop(t0, message) {\n\tvar tDiff = process.hrtime(t0);\n\tlog('%d sec -- %s', (tDiff[0] + (tDiff[1] / 1000000000)).toFixed(4), message);\n}\n\nmodule.exports = { start: start, stop: stop };\n"}